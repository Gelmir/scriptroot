--- a/branches/RC_0_16/src/alert.cpp
+++ b/branches/RC_0_16/src/alert.cpp
@@ -630,4 +630,11 @@
 		return msg;
 	}
 
+	std::string peer_disconnected_alert::message() const
+	{
+		char msg[600];
+		snprintf(msg, sizeof(msg), "%s disconnecting: [%s] %s", peer_alert::message().c_str()
+			, error.category().name(), error.message().c_str());
+		return msg;
+	}
 } // namespace libtorrent
--- a/branches/RC_0_16/src/alert.cpp
+++ b/branches/RC_0_16/src/alert.cpp
@@ -635,7 +635,7 @@
 	{
 		char msg[600];
 		snprintf(msg, sizeof(msg), "%s disconnecting: [%s] %s", peer_alert::message().c_str()
-			, error.category().name(), error.message().c_str());
+			, error.category().name(), convert_from_native(error.message()).c_str());
 		return msg;
 	}
 } // namespace libtorrent
--- a/branches/RC_0_16/include/libtorrent/alert_types.hpp
+++ b/branches/RC_0_16/include/libtorrent/alert_types.hpp
@@ -515,8 +515,7 @@
 		TORRENT_DEFINE_ALERT(peer_disconnected_alert);
 
 		const static int static_category = alert::debug_notification;
-		virtual std::string message() const
-		{ return peer_alert::message() + " disconnecting: " + error.message(); }
+		virtual std::string message() const;
 
 		error_code error;
 
--- a/branches/RC_0_16/include/libtorrent/alert_types.hpp
+++ b/branches/RC_0_16/include/libtorrent/alert_types.hpp
@@ -342,7 +342,7 @@
 			, std::string const& url_
 			, error_code const& e)
 			: tracker_alert(h, url_)
-			, msg(e.message())
+			, msg(convert_from_native(e.message()))
 		{ TORRENT_ASSERT(!url.empty()); }
 
 		scrape_failed_alert(torrent_handle const& h
@@ -467,7 +467,7 @@
 			, error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 
@@ -476,7 +476,7 @@
 		const static int static_category = alert::peer_notification;
 		virtual std::string message() const
 		{
-			return peer_alert::message() + " peer error: " + error.message();
+			return peer_alert::message() + " peer error: " + convert_from_native(error.message());
 		}
 
 		error_code error;
@@ -508,7 +508,7 @@
 			, error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 
@@ -695,7 +695,7 @@
 		virtual std::string message() const
 		{
 			return torrent_alert::message() + " storage move failed: "
-				+ error.message();
+				+ convert_from_native(error.message());
 		}
 
 		error_code error;
@@ -723,7 +723,7 @@
 			, error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 	
@@ -734,7 +734,7 @@
 		virtual std::string message() const
 		{
 			return torrent_alert::message() + " torrent deletion failed: "
-				+ error.message();
+				+convert_from_native(error.message());
 		}
 
 		error_code error;
@@ -770,7 +770,7 @@
 			, error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 	
@@ -781,7 +781,7 @@
 		virtual std::string message() const
 		{
 			return torrent_alert::message() + " resume data was not generated: "
-				+ error.message();
+				+ convert_from_native(error.message());
 		}
 		virtual bool discardable() const { return false; }
 
@@ -838,7 +838,7 @@
 			, error_code const& e)
 			: torrent_alert(h)
 			, url(url_)
-			, msg(e.message())
+			, msg(convert_from_native(e.message()))
 		{}
 
 		url_seed_alert(
@@ -874,7 +874,7 @@
 			, error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 
@@ -886,7 +886,7 @@
 		virtual std::string message() const
 		{
 			return torrent_alert::message() + " file (" + file + ") error: "
-				+ error.message();
+				+ convert_from_native(error.message());
 		}
 
 		std::string file;
@@ -939,7 +939,7 @@
 		virtual std::string message() const
 		{
 			error_code ec;
-			return "UDP error: " + error.message() + " from: " + endpoint.address().to_string(ec);
+			return "UDP error: " + convert_from_native(error.message()) + " from: " + endpoint.address().to_string(ec);
 		}
 
 		udp::endpoint endpoint;
@@ -1004,7 +1004,7 @@
 			:  mapping(i), map_type(t), error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 
@@ -1061,7 +1061,7 @@
 			, error(e)
 		{
 #ifndef TORRENT_NO_DEPRECATE
-			msg = error.message();
+			msg = convert_from_native(error.message());
 #endif
 		}
 
@@ -1070,7 +1070,7 @@
 		const static int static_category = alert::status_notification
 			| alert::error_notification;
 		virtual std::string message() const
-		{ return torrent_alert::message() + " fast resume rejected: " + error.message(); }
+		{ return torrent_alert::message() + " fast resume rejected: " + convert_from_native(error.message()); }
 
 		error_code error;
 